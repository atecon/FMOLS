set verbose off
clear

set assert stop
include assertion.gfn

include "./src/FMOLS.inp" --force
include criteria.gfn




bundles Params = null
Params = Params + _(key = "nc", expected = -1)
Params = Params + _(key = "c", expected = 0)
Params = Params + _(key = "ct", expected = 1)
Params = Params + _(key = "ctt", expected = 2)

function void test_deterministic_to_id_map (const bundles P)
    print "Start testing deterministic_to_id_map()."

    loop foreach i P
        # Given + When
        bundle B = deterministic_to_id_map()
        catch scalar actual = B[P[i].key]
        scalar err = $error

        # Then
        if !err
            assert(actual == P[i].expected)
        endif
    endloop
end function
test_deterministic_to_id_map(Params)


bundles Params = null
Params = Params + _(type_kernel = "quadratic", expected = 1)
Params = Params + _(type_kernel = "parzen", expected = 2)
Params = Params + _(type_kernel = "bartlett", expected = 3)
Params = Params + _(type_kernel = "foo")

function void test_kernel_label_to_id_map (const bundles P)
    print "Start testing kernel_label_to_id_map()."

    loop foreach i P
        # Given + When
        bundle B = kernel_label_to_id_map()
        catch scalar actual = B[P[i].type_kernel]
        scalar err = $error

        # Then
        if !err
            assert(actual == P[i].expected)
        endif
    endloop
end function
test_kernel_label_to_id_map(Params)


bundles Params = null
Params = Params + _(type_kernel = "quadratic", expected = 1)
Params = Params + _(type_kernel = "parzen", expected = 2)
Params = Params + _(type_kernel = "bartlett", expected = 3)
Params = Params + _(type_kernel = "foo", expected = 47)

function void test_get_kernel_id (const bundles P)
    print "Start testing get_kernel_id()."

    loop foreach i P
        # Given + When
        catch scalar actual = get_kernel_id(P[i].type_kernel)
        scalar err = $error

        # Then
        if err
            assert(err == P[i].expected)
        else
            assert(actual == P[i].expected)
        endif
    endloop
end function
test_get_kernel_id(Params)



bundle Input = _(\
                    quadratic = 1,\
                    parzen = 2,\
                    bartlett = 3\
                )
bundles Params = null
Params = Params + _(expected = "quadratic", value = 1)
Params = Params + _(expected = "parzen", value = 2)
Params = Params + _(expected = "bartlett", value = 3)
Params = Params + _(expected = "", value = 99)

function void test_num_value_to_str_key (const bundle Input, const bundles P)
    print "Start testing num_value_to_str_key()."

    loop foreach i P
        # Given + When
        string actual = num_value_to_str_key(Input, P[i].value)

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_num_value_to_str_key(Input, Params)


bundles Params = null
Params = Params + _(type = "nc", expected = -1)
Params = Params + _(type = "c", expected = 0)
Params = Params + _(type = "ct", expected = 1)
Params = Params + _(type = "ctt", expected = 2)

function void test_get_trend_powermax (const bundles P)
    print "Start testing get_trend_powermax()."

    loop foreach i P
        # Given + When
        actual = get_trend_powermax(P[i].type)

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_get_trend_powermax(Params)


bundles Params = null
Params = Params + _(type = TRUE, expected = " Pre-Whitened")
Params = Params + _(type = FALSE, expected = " Not Pre-Whitened")
function void test_msg_prewhiten (const bundles P)
    print "Start testing msg_prewhiten()."

    loop foreach i P
        # Given + When
        actual = msg_prewhiten(P[i].type)

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_msg_prewhiten(Params)


bundles Params = null
Params = Params + _(T = 4, maxpower =-1, expected = {})
Params = Params + _(T = 4, maxpower = 0, expected = ones(4, 1))
Params = Params + _(T = 4, maxpower = 1,\
                    expected = ones(4, 1) ~ {-1; 0; 1; 2})
Params = Params + _(T = 4, maxpower = 2,\
                    expected = ones(4, 1) ~ \
                               {-1; 0; 1; 2} ~ \
                               {1; 0; 1; 4}\
                    )
function void test_timepoly (const bundles P)
    print "Start testing function timepoly()."

    loop foreach i P
        # Given
        expected = vec(P[i].expected)

        # When
        matrix actual = timepoly(P[i].T, P[i].maxpower)
        actual = vec(actual)

        # Then
        assert(nelem(actual) == nelem(expected))

        if nelem(expected)
            loop j=1..nelem(expected)
                assert(actual[j] == expected[j])
            endloop
        endif
    endloop
end function
test_timepoly(Params)



bundles Params = null
Params = Params + _(type ="nc", expected = " No constant")
Params = Params + _(type ="c", expected = " Constant")
Params = Params + _(type ="ct", expected = " Constant and linear trend")
Params = Params + _(type ="ctt",\
                    expected = " Constant, linear and quadratic trend")

function void test_msg_type_dgp_x (const bundles P)
    print "Start testing function msg_type_dgp_x()."

    loop foreach i P
        # Given + When
        string actual = msg_type_dgp_x(P[i].type)
        actual

        # Then
        assert(actual == P[i].expected)
    endloop
end function
test_msg_type_dgp_x(Params)


open denmark.gdt --quiet
series spread = IDE - IBO
list xlist = LRY spread
bundles Parameters = null

Parameters = Parameters + _(type_deterministic = "c",\
                            type_dgp_x = "c",\
                            do_prewhite = TRUE,\
                            type_kernel = "quadratic",\
                            verbose = FALSE,\
                            expected_coeff = {1.38237; 3.89836; 3.78441},\
                            expected_v_vec = {0.016688; -0.025723;\
                                            -0.10105; 0.0000; 0.19511;\
                                            0.16602; 0.0000; 0.0000; 0.61259},\
                            expected_sigma = 0.0494721\
                            )

Parameters = Parameters + _(type_deterministic = "ct",\
                            type_dgp_x = "c",\
                            do_prewhite = FALSE,\
                            type_kernel = "parzen",\
                            verbose = FALSE,\
                            expected_coeff = {1.6023; 3.7797; 2.4678; -0.0012935},\
                            expected_v_vec = {0.016817; -0.0054788;\
                                              -0.10045; -5.6127e-05;\
                                              0.0000; 0.10797; 0.039773;\
                                              -5.3193e-05; 0.0000;\
                                              0.0000; 0.60052; 0.00033044;\
                                              0.0000; 0.0000; 0.0000;\
                                              3.8357e-07},\
                            expected_sigma = 0.0467072\
                            )

Parameters = Parameters + _(type_deterministic = "c",\
                            type_dgp_x = "nc",\
                            do_prewhite = TRUE,\
                            type_kernel = "quadratic",\
                            verbose = FALSE,\
                            expected_coeff = {1.38681; 3.86685; 3.75875},\
                            expected_v_vec = {0.017108; -0.026370; -0.10359;\
                                              0; 0.20002; 0.17020;\
                                              0; 0; 0.62801},\
                            expected_sigma = 0.04930167\
                            )

Parameters = Parameters + _(type_deterministic = "nc",\
                            type_dgp_x = "nc",\
                            do_prewhite = TRUE,\
                            type_kernel = "quadratic",\
                            verbose = FALSE,\
                            expected_err = 47\
                            )

Parameters = Parameters + _(type_deterministic = "c",\
                            type_dgp_x = "ct",\
                            do_prewhite = TRUE,\
                            type_kernel = "quadratic",\
                            verbose = FALSE,\
                            expected_coeff = {1.3248; 3.8060; 4.12132},\
                            expected_v_vec = {0.017992; -0.027733; -0.10894;\
                                              0; 0.21035; 0.17899;\
                                              0; 0; 0.66045},\
                            expected_sigma = 0.048613\
                            )

function void test_FMOLS (const bundles P, const series y, const list L)
    print "Start testing FMOLS()."

    loop foreach i P        # Given
        print i
        bundle model = null

        # When
        catch model = FMOLS(y, L, P[i])
        scalar err = $error

        if exists(P[i].expected_err)
            assert(err == P[i].expected_err)
        else
            matrix v_vec = vec(lower(model.vcv))

            # Then
            loop j=1..rows(model.coeff)
                assert_almost_equal_num(model.coeff[j],\
                                        P[i].expected_coeff[j], 1e-4)
            endloop

            loop j=1..rows(v_vec)
                assert_almost_equal_num(v_vec[j], P[i].expected_v_vec[j], 1e-3)
            endloop
            assert_almost_equal_num(model.sigma, P[i].expected_sigma, 1e-5)
        endif
    endloop
end function
test_FMOLS(Parameters, LRM, xlist)



function void test_type_strings_tolower (void)
    print "Start testing function type_strings_tolower()"

    # Given
    bundle actual = _(type_deterministic = "DeT",\
                      type_dgp_x = "FoO",\
                      type_kernel = "QUadRatic")

    bundle expected = _(type_deterministic = "det",\
                       type_dgp_x = "foo",\
                       type_kernel = "quadratic")

    # When
    type_strings_tolower(&actual)

    # Then
    loop foreach i actual
        assert(actual["$i"] == expected["$i"])
    endloop
end function
test_type_strings_tolower()


nulldata 3 --preserve
series y1 = normal()
series y2 = y1
y2[1] = NA
series y3 = y1
y3[2] = NA
list L = y1 y2 y3

bundles Params = null
Params = Params + _(endog = "y1", expected_err = FALSE,\
                    expected_t1 = 1, expected_t2 = $nobs)
Params = Params + _(endog = "y2", expected_err = FALSE,\
                    expected_t1 = 2, expected_t2 = $nobs)
Params = Params + _(endog = "y3", expected_err = 47)

function void test_check_sample (const bundles P, const list L)
    print "Start testing check_sample()."

    loop foreach i P
        # Given
        string vname = P[i].endog
        list Input = L.@vname

        # When
        catch bundle actual = check_sample(Input, _(verbose = 1))
        scalar err = $error

        # Then
        if err
            assert(err == P[i].expected_err)
        else
            assert(actual.t1 == P[i].expected_t1)
            assert(actual.t2 == P[i].expected_t2)
        endif
    endloop
end function
test_check_sample(Params, L)


function void test_fmols_defaults (void)
    print "Start testing function fmols_defaults()"

    # Given
    bundle expected
    expected.type_deterministic = "c"
    expected.type_dgp_x = "c"
    expected.type_kernel = "quadratic"
    expected.do_prewhite = TRUE
    expected.bandwidth = -1
    expected.verbose = TRUE

    # When
    bundle actual = fmols_defaults()

    # Then
    loop foreach i expected
        assert(actual["$i"] == expected["$i"])
    endloop
end function
test_fmols_defaults()



# ===================================
# ADD unit tests for these functions.
# ===================================

function void test_bwidth (void)
    print "No test for function bwidth(), yet"
    # Given
    # When
    # Then
end function
test_bwidth()


print "Finished all tests succesfully."
quit
