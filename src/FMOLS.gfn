<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="FMOLS" minver="2021a">
<author email="stefano.fachin@uniroma1.it">Stefano Fachin, Riccardo &quot;Jack&quot; Lucchetti and Artur Tarassow</author>
<version>2.1</version>
<date>2022-02-14</date>
<description>Fully Modified Least Squares Estimation for I(1) variables</description>
<tags>C13 C52</tags>
<label>FMOLS estimation with I(1) series</label>
<menu-attachment>MAINWIN/Model/TSModels</menu-attachment>
<help>
This function carries out Fully Modified Least Squares (FMLS) estimation.
It is essentially a translation (with permission) of the Gauss procedure
FMPROC included in the suite COINT 2.0, by S. Ouliaris and P.C.B Phillips.


References:
Hansen, B. E. and P. C. B. Phillips (1990), &quot;Estimation and Inference
in Models of Cointegration: A Simulation Study&quot;, Advances in
Econometrics, Vol. 8, pp. 225-248, Jai Press, Inc.:London.

Phillips, P. C. B. and B. E. Hansen (1990), &quot;Statistical Inference in
Instrumental Variables Regression with I(1) Process&quot;, Review of
Economic Studies 57, pp. 99-125.


The only public function is FMOLS() which has the following arguments:

FMOLS(const series y, const list x, const bundle opts[null])
==================================================================

Input parameters
    y:     series, Dependent variable
    x:     list, Right Hand Side I(1) variables
    opts:  bundle, Pass user-specific parameters (optional, see below)


Return: Bundle holding various information; see below.


The FMOLS() function, both in scripting and GUI mode, is executed with some
default parameter values.
In GUI mode these can be overridden using the pull-down menus, and in scripting
mode by passing the 'opts' bundle:
==============================================================================
type_deterministic:
    string, Select the deterministic which is believed to be
    describing the stochastic process of the endogenous.
    Options are:
        &quot;c&quot;: include a constant (default)
        &quot;ct&quot;: include a constant and linear trend
        &quot;ctt&quot;: include a constant, linear and quadratic trend

type_dgp_x:
    string, Select the deterministic which is believed to be
    describing the stochastic process of the regressors &quot;x&quot;.
    Options are:
        &quot;nc&quot;: x is assumed to be I(1) with no drift (differences of x have zero
              mean)
        &quot;c&quot;:  x is assumed to be I(1) with drift (differences of x have non-zero
              mean) (default)
        &quot;ct&quot;: x is assumed to be I(1)  with a trending drift (differences of x
              have a trend)

do_prewhite:
    boolean, Perform VAR(1) pre-whitening when calculating covariances if 1
    (=TRUE), otherwise not.

type_kernel:
    string, Select the kernel method. Options are:
        &quot;quadratic&quot;: Quadratic Spectral kernel (default)
        &quot;parzen&quot;: Parzen kernel
        &quot;bartlett&quot;: Bartlett kernel
bandwidth:
   scalar, Bandwidth for covariance calculation. The special value -1 triggers
   Andrews' (1991) automatic bandwidth selection. A VAR(1) model is used to
   calculate the automatic bandwidth.

verbose:
   boolean, Print any output if 1 (=TRUE, default), otherwise not.


The returned bundle contains:
=============================
    coeff:      matrix, Estimates of the estimated (by FMOLS) long-run
                coefficients
    stderr:     matrix, Standard error of the coefficients
    vcv:        matrix, Square matrix containing the estimated covariance matrix
                for the coefficients
    sigma:      scalar, Standard error of the regression
    df:         int, Degrees of freedom
    uhat:       series, Estimated FMOLS-based residuals which are defined as
                uhat(t) = y(t) - x(t)*b where b is the vector of long-run
                coefficients
    yhat:       series, Fitted values
    T:          int, Number of valid observations used
    t1:         int, Index of the initial observation used for estimation
    t2:         int, Index of the last observation used for estimation
    depvar:     string, Name of the dependent variable
    parnames:   strings, Array of names of the exogenous variables
    names_xlist: String array of the exogenous
    aic:        scalar, Akaike information criteria
    aicc:       scalar, corrected Akaike information criteria
    bic:        scalar, Schwarz information criteria
    hqc:        scalar, Hannan-Quinn information criteria
    bandwidth:  scalar, value of (automatically selected) bandwidth



Changelog:
==========
v2.1 (February 2022):
  - Fix potential bug when computing short-run innovations
  - Put GUI entry under &quot;Univariate time series&quot; menu
v2.0 (February 2022):
  - Refactored code
  - Improved and new user-interface with an option to pass bundle of
    parameters.
  - Improved printout
  - Return model bundle including various information on estimation
v1.0 (March 2017):
  - initial version
</help>
<depends count="1">
criteria </depends>
<gretl-function name="FMOLS" type="bundle">
 <params count="3">
  <param name="ys" type="series" const="true"/>
  <param name="xlist" type="list" const="true"/>
  <param name="opts" type="bundle" optional="true" const="true"/>
 </params>
<code>/* Public function calling all necessary steps. */
bundle self = fmols_defaults()
if exists(opts)
  self = opts + self
endif
errorif(get_trend_powermax(self.type_deterministic) &lt; 0, &quot;The assumed deterministic for the endogenous must include at least a constant. Please adapt parameter 'type_deterministic'.&quot;)
errorif(self.bandwidth == 0, &quot;The bandwidth cannot be zero. Please adjust.&quot;)
type_strings_tolower(&amp;self)
string self.name_endogenous = argname(ys)
string self.names_xlist = varname(xlist)
self = self + check_sample(deflist(ys, xlist), self)
smpl self.t1 self.t2
scalar self.T = $nobs
add_column_dimensions(xlist, &amp;self)
matrix mtmp = timepoly($nobs, get_trend_powermax(self.type_deterministic))
list det_levels = matrix_to_list(mtmp)
# one observation lost due to differencing of level series
smpl (self.t1 + 1) ;
list det_dynamics
matrix mtmp = timepoly($nobs, get_trend_powermax(self.type_dgp_x))
list det_dynamics = matrix_to_list(mtmp, &quot;_dyn&quot;)
# TODO: At some point matrix_to_list() can be replaced by gretl's internal mat2list() function introduced in 2022a
# OLS regression of levels + deterministics
list xlist_deter = xlist det_levels
smpl (self.t1 + 1) ;
series lrun_innovations = get_longrun_innovations(ys, xlist_deter)
# TODO: get_longrun_innovations() may be replaced by gretl's internal lrvar()
# Construct errors of dynamics: Has (T-1) observations due to differencing
# Note: ols command not applicable as xlist can have multiple columns
smpl full
if nelem(det_dynamics)  # if type_dgp_x != &quot;nc&quot;
  matrix self.srun_innovations = get_shortrun_innovations(xlist, det_dynamics)
else
  smpl (self.t1 + 1) ;
  matrix self.srun_innovations = {diff(xlist)}
endif
smpl (self.t1 + 1) ;
matrix xdx = {xlist_deter}'self.srun_innovations
# Concatenate errors
matrix innovations = {lrun_innovations} ~ self.srun_innovations
matrix vcv_innovations = innovations'innovations
if self.do_prewhite             # Pre-white residuals using VAR(p)
  matrix innovations_white
  matrix coeff_white = est_var_model(innovations, &amp;innovations_white)
else
  matrix innovations_white = innovations
endif
scalar self.Teffective = rows(innovations_white)
if self.bandwidth == -1
  scalar self.bandwidth = compute_bandwidth(innovations_white, self.type_kernel)
endif
# Estimate covariances
matrix kernel_est = compute_kernel(self.Teffective, self.type_kernel, self.bandwidth)
matrix sigma = innovations_white'innovations_white
# long-run covariance matrix
matrix lambda = longrun_cov(kernel_est, innovations_white)
matrix self.delta = sigma + lambda
matrix self.omega = self.delta + lambda'
if self.do_prewhite
  matrix ai
  matrix self.omega = recolor_omega(self.omega, coeff_white, &amp;ai)
  matrix self.delta = recolor_delta(self.delta, coeff_white, ai, vcv_innovations)
endif
# Fill the model bundle
bundle model = fmols_est(ys, xlist_deter, self)
strings model.parnames = varnames(xlist_deter)
rnameset(model.coeff, model.parnames)
model.df = model.T - rows(model.coeff)
model.depvar = argname(ys)
add_info_criteria(&amp;model)
model.type_kernel = self.type_kernel
model.type_dgp_x = self.type_dgp_x
model.type_deterministic = self.type_deterministic
model.do_prewhite = self.do_prewhite
model.bandwidth = self.bandwidth
if self.verbose
  print_results(model)
endif
return model
</code>
</gretl-function>
<gretl-function name="FMOLS_GUI" type="bundle" pkg-role="gui-main">
 <params count="8">
  <param name="y" type="series" const="true">
<description>dependent variable</description>
  </param>
  <param name="X" type="list" const="true">
<description>explanatory variables</description>
  </param>
  <param name="type_deterministic" type="int" min="0" max="2" default="0">
<description>Deterministics for dep. var.</description>
<labels count="3">
"Constant" "Linear trend" "Quadratic trend" </labels>
  </param>
  <param name="type_dgp_x" type="int" min="-1" max="1" default="0">
<description>Deterministics for indep. var.</description>
<labels count="3">
"No constant" "Constant" "Linear trend" </labels>
  </param>
  <param name="kernel_id" type="int" min="1" max="3" default="1">
<description>kernel type</description>
<labels count="3">
"Quadratic" "Parzen" "Bartlett" </labels>
  </param>
  <param name="bandwidth" type="int" min="-1" default="-1">
<description>Bandwidth (-1 = automatic)</description>
  </param>
  <param name="prewhite" type="bool" default="1">
<description>Perform VAR(1) prewhitening?</description>
  </param>
  <param name="verbose" type="bool" default="1">
<description>Show results</description>
  </param>
 </params>
<code>bundle opts = _(do_prewhite = prewhite, bandwidth = bandwidth, verbose = verbose)
opts.type_deterministic = num_value_to_str_key(deterministic_to_id_map(), type_deterministic)
opts.type_dgp_x = num_value_to_str_key(deterministic_to_id_map(), type_dgp_x)
opts.type_kernel = num_value_to_str_key(kernel_label_to_id_map(), kernel_id)
ret = FMOLS(y, X, opts)
return ret
</code>
</gretl-function>
<gretl-function name="timepoly" type="matrix" private="1">
 <params count="2">
  <param name="T" type="int" min="1" const="true"/>
  <param name="maxpower" type="int" min="-1" const="true"/>
 </params>
<code>/* Compute constant and (non-)linear trend.
Parameters:
T: number of observations
maxpower:-1 = no constant
0 = constant
1 = linear trend
2 = quadratic trend
return: A matrix holding the requested deterministics.
maxpower ==-1: empty matrix
maxpower == 0: T by 1 matrix with ones
maxpower == 1: T by 2 matrix with ones and linear trend
maxpower == 2: T by 3 matrix with ones linear and quadratic  trend
*/
if maxpower == -1
  matrix ret = {}
  cnameset(ret, &quot;none&quot;)
  return ret
endif
strings clabels = defarray(&quot;intercept&quot;)
matrix ret = ones(T, 1)
if maxpower &gt; 0
  scalar hT = floor(T / 2)
  scalar even = T % 2
  matrix trend = seq((1 - even - hT), hT)'
  ret ~= trend.^seq(1, maxpower)
  if maxpower &gt; 0
    clabels += &quot;trend&quot;
  endif
  if maxpower &gt; 1
    clabels += &quot;qtrend&quot;
  endif
endif
cnameset(ret, clabels)
return ret
</code>
</gretl-function>
<gretl-function name="msg_type_dgp_x" type="string" private="1">
 <params count="1">
  <param name="type" type="string" const="true"/>
 </params>
<code>/* Map selected type to unique ID. */
if type == &quot;nc&quot;
  ret = &quot; No constant&quot;
elif type == &quot;c&quot;
  ret = &quot; Constant&quot;
elif type == &quot;ct&quot;
  ret = &quot; Constant and linear trend&quot;
elif type == &quot;ctt&quot;
  ret = &quot; Constant, linear and quadratic trend&quot;
endif
return ret
</code>
</gretl-function>
<gretl-function name="msg_prewhiten" type="string" private="1">
 <params count="1">
  <param name="do_prewhite" type="bool" const="true"/>
 </params>
<code>/* For printing only. */
if do_prewhite
  return &quot; Pre-Whitened&quot;
else
  return &quot; Not Pre-Whitened&quot;
endif
</code>
</gretl-function>
<gretl-function name="get_stats" type="matrix" private="1">
 <params count="1">
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Compile vector of model statistics
return: matrix, column vector of statistics. */
matrix stats = self.ess | self.sigma | self.aic | self.aicc | self.bic | self.hqc | self.df
strings label = defarray(&quot;Sum squared resid&quot;, &quot;S.E. of regression&quot;, &quot;Akaike criterion&quot;, &quot;Akaike corrected&quot;, &quot;Schwarz criterion&quot;, &quot;Hannan-Quinn&quot;, &quot;Degrees of freedom&quot; )
rnameset(stats, label)
return stats
</code>
</gretl-function>
<gretl-function name="capitalize" type="string" private="1">
 <params count="1">
  <param name="s" type="string"/>
 </params>
<code>/* Convert the first character of the string 's' to a capital (uppercase).
return: string, First character of 's' in the capital.*/
return toupper(s[1]) ~ substr(s, 2, nelem(s))
</code>
</gretl-function>
<gretl-function name="print_results" type="void" private="1">
 <params count="1">
  <param name="model" type="bundle" const="true"/>
 </params>
<code>/* Print estimation results. */
matrix coeff_se = model.coeff ~ model.stderr
strings label = model.parnames
matrix stats = get_stats(model)
label += rnameget(stats)
string msg_type_dgp_x = msg_type_dgp_x(model.type_dgp_x)
string msg_whiten = msg_prewhiten(model.do_prewhite)
string msg_kernel = sprintf(&quot; %s&quot;, capitalize(model.type_kernel))
if model.bandwidth == -1
  msg_band = sprintf(&quot;(automatic) estimate: %5.3g\n&quot;, model.bandwidth)
else
  msg_band = sprintf(&quot;preset at: %2.3g\n&quot;, model.bandwidth)
endif
print  &quot;======================================================================&quot;
print &quot;Cointegrating regression&quot;
printf &quot;FMOLS, using observations %s-%s (T = %d)\n\n&quot;, obslabel(model.t1), obslabel(model.t2), model.T
printf &quot;Dependent variable: %s\n&quot;, model.depvar
printf &quot;Assumed regressor deterministics:&quot;
print msg_type_dgp_x
printf &quot;Method of estimation of covariance parameters:&quot;
print msg_whiten
printf &quot;Kernel:&quot;
print msg_kernel
printf &quot;Bandwidth &quot;
print msg_band
print  &quot;_____________________________________________________________________&quot;
modprint coeff_se label stats
print  &quot;======================================================================&quot;
</code>
</gretl-function>
<gretl-function name="num_value_to_str_key" type="string" private="1">
 <params count="2">
  <param name="B" type="bundle" const="true"/>
  <param name="value" type="scalar" const="true"/>
 </params>
<code>/* Access key of a bundle via some UNIQUE scalar. This is just the opposite
procedure to what is usually done: access a value via key.
return: string, Name of the associated key. If not key exists for the 'value', return an empty string. */
loop foreach i B
  scalar id = B[&quot;$i&quot;]
  if id == value
    return &quot;$i&quot;
  endif
endloop
return &quot;&quot;
</code>
</gretl-function>
<gretl-function name="kernel_label_to_id_map" type="bundle" private="1">
<code>/* Map kernel label to unique ID.
return: bundle, Mapping kernel label (key) to ID (value). */
bundle B = _( quadratic = 1, parzen = 2, bartlett = 3 )
return B
</code>
</gretl-function>
<gretl-function name="get_kernel_id" type="scalar" private="1">
 <params count="1">
  <param name="type_kernel" type="string" const="true"/>
 </params>
<code>/* Map kernel type to unique ID. */
catch scalar id = kernel_label_to_id_map()[type_kernel]
errorif($error, sprintf(&quot;Kernel type '%s' not known. Abort.&quot;, type_kernel))
return id
</code>
</gretl-function>
<gretl-function name="bwidth" type="scalar" private="1">
 <params count="5">
  <param name="type_kernel" type="string" const="true"/>
  <param name="T" type="int" min="1"/>
  <param name="ae" type="matrix" const="true"/>
  <param name="se" type="matrix" const="true"/>
  <param name="ad" type="scalar" const="true"/>
 </params>
<code>/* Compute bandwidth. */
if get_kernel_id(type_kernel) == 1       # Quadratic Spectral
  scalar coeff_white = 4 * ( sumc((ae.*se./((1-ae).^4)).^2) ) / ad
  eband = 1.3221 * ( (coeff_white * T)^.2 )
elif get_kernel_id(type_kernel) == 2     # Parzen
  scalar coeff_white = 4 * ( sumc((ae.*se./((1-ae).^4)).^2) ) / ad
  eband = 2.6614 * ( (coeff_white * T)^.2 )
elif get_kernel_id(type_kernel) == 3     # Bartlett
  scalar coeff_white = 4 * ( sumc((ae.*se./(((1-ae).^3).*(1+ae))).^2) )' / ad
  eband = 1.1447 * ( (coeff_white * T)^(1/3) )
endif
return eband
</code>
</gretl-function>
<gretl-function name="compute_bandwidth" type="scalar" private="1">
 <params count="2">
  <param name="mat" type="matrix" const="true"/>
  <param name="type_kernel" type="string" const="true"/>
 </params>
<code>/* Compute optimal bandwidth.
return: scalar, value of optimal bandwidth. */
scalar T = rows(mat)
matrix eb = mat[1:(T-1),]
matrix ef = mat[2:T,]
matrix ae = ( sumc(eb .* ef)./sumc(eb.^2) )'
matrix ee = ef - eb .* ae'
matrix se = sqrt( meanc(ee.^2) )'
scalar ad = sumc( (se ./ ((1 - ae).^2)).^2 )'
return bwidth(type_kernel, T, ae, se, ad)
</code>
</gretl-function>
<gretl-function name="compute_kernel" type="matrix" private="1">
 <params count="3">
  <param name="T" type="int" min="1"/>
  <param name="type_kernel" type="string" const="true"/>
  <param name="bandwidth" type="scalar"/>
 </params>
<code>/* Compute kernel-based weights.
return: matrix, vector of weights. */
matrix jb = seq(1, (T-1)) ./ bandwidth
if get_kernel_id(type_kernel) == 1   # Quadratic Spectral
  jband = jb * 1.2 * $pi
  matrix kernel_est = 3 * ((sin(jband)./jband - cos(jband))./(jband.^2))
elif get_kernel_id(type_kernel) == 2     #  Parzen
  matrix kernel_est = (1 - (jb.^2)*6 + (jb.^3)*6).*(jb .&lt;= 0.5)
  kernel_est = kernel_est + 2 * ((1-jb).^3) .* ((jb .&lt;=1) &amp;&amp; (jb .&gt; 0.5))
elif get_kernel_id(type_kernel) == 3     #  Bartlett
  matrix kernel_est = (1-jb).*(jb .&lt;= 1)
else
  errorif(TRUE, sprintf(&quot;Kernel type '%s' is not known. Abort.&quot;, type_kernel))
endif
return vec(kernel_est)
</code>
</gretl-function>
<gretl-function name="check_sample" type="bundle" private="1">
 <params count="2">
  <param name="L" type="list" const="true"/>
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/*  Check for missing values and return sample start and end observations.*/
scalar Told = $nobs
catch smpl L --contiguous
errorif($error, &quot;ERROR: Your dataset has missing values in between for some of your variables. Abort.&quot;)
scalar Tnew = $nobs
scalar Tdiff = Told - Tnew
if Tdiff &amp;&amp; self.verbose
  printf &quot;\nWARNING: Dropped %d observations due to missing values.&quot;,Tdiff
endif
if self.verbose
  printf &quot;\nINFO: Sample range: %s to %s.\n&quot;, obslabel($t1), obslabel($t2)
endif
return _(t1 = $t1, t2 = $t2)
</code>
</gretl-function>
<gretl-function name="add_column_dimensions" type="void" private="1">
 <params count="2">
  <param name="xlist" type="list" const="true"/>
  <param name="self" type="bundleref"/>
 </params>
<code>/*  Determine column dimensions of matrices. */
scalar self.cols_mx = nelem(xlist)
scalar self.cols_mymx = 1 + self.cols_mx
</code>
</gretl-function>
<gretl-function name="get_shortrun_innovations" type="matrix" private="1">
 <params count="2">
  <param name="xlist" type="list" const="true">
<description>in levels</description>
  </param>
  <param name="deter" type="list" const="true">
<description>Deterministics</description>
  </param>
 </params>
<code>/* Compute short-term innovations: clean differences from deterministics. */
list Dxlist = diff(xlist)
smpl Dxlist deter --no-missing
matrix u = mshape(NA, $nobs, 1)
mols({Dxlist}, {deter}, &amp;u)
return u
</code>
</gretl-function>
<gretl-function name="get_longrun_innovations" type="series" private="1">
 <params count="2">
  <param name="y" type="series" const="true">
<description>Endogenous in levels</description>
  </param>
  <param name="xlist" type="list" const="true">
<description>levels + deterministics</description>
  </param>
 </params>
<code>/* Compute long-run coefficient vector and return residuals which \
are equivalent to deviations from long-run relationship.
return: series, residuals */
smpl y xlist --no-missing
catch ols y xlist --quiet
errorif($error, &quot;Level estimation failed. Abort.&quot;)
return $uhat
</code>
</gretl-function>
<gretl-function name="est_var_model" type="matrix" private="1">
 <params count="2">
  <param name="m" type="matrix" const="true"/>
  <param name="uhat" type="matrixref"/>
 </params>
<code>/* Estimate a VAR model by mols(). Return coefficient matrix. */
scalar init = 2      # get rid of initial NAs
scalar T = rows(m)
matrix m_lags = mlag(m, 1, NA)[init:,]
matrix bhat = mols( m[init:,], m_lags, &amp;uhat )
errorif($error, &quot;Pre-whitening failed. Abort.&quot;)
return bhat
</code>
</gretl-function>
<gretl-function name="fmols_defaults" type="bundle" private="1">
<code>/*  Set and return default values. */
bundle B
string B.type_deterministic = &quot;c&quot;
string B.type_dgp_x = &quot;c&quot;
string B.type_kernel = &quot;quadratic&quot;
scalar B.do_prewhite = TRUE
scalar B.bandwidth = -1
scalar B.verbose = TRUE
return B
</code>
</gretl-function>
<gretl-function name="deterministic_to_id_map" type="bundle" private="1">
<code>/* Map label of deterministic type to unique ID.
return: bundle, Mapping label of deterministic (key) to ID (value). */
bundle B = _( nc = -1, c = 0, ct = 1, ctt = 2 )
return B
</code>
</gretl-function>
<gretl-function name="get_trend_powermax" type="scalar" private="1">
 <params count="1">
  <param name="type" type="string" const="true"/>
 </params>
<code>/* Map deterministics to maximum degree (power) of trend variable. */
return deterministic_to_id_map()[&quot;@type&quot;]
</code>
</gretl-function>
<gretl-function name="type_strings_tolower" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Format specific string values.
return: void */
strings keys = defarray(&quot;type_deterministic&quot;, &quot;type_dgp_x&quot;, &quot;type_kernel&quot; )
loop foreach i keys
  self[&quot;$i&quot;] = tolower(self[&quot;$i&quot;])
endloop
</code>
</gretl-function>
<gretl-function name="matrix_to_list" type="list" private="1">
 <params count="2">
  <param name="m" type="matrix" const="true"/>
  <param name="suffix" type="string" optional="true"/>
 </params>
<code>/* Cast column vectors to series and add to list.
return: list, column vectors as list */
# TODO: This function will be superseded by a native one soon.
list L
string suffix = exists(suffix) ? suffix : &quot;&quot;
loop i=1..cols(m)
  string sername = fixname(cnameget(m)[i])
  list L += genseries(sprintf(&quot;%s%s&quot;, sername, suffix), m[,i])
endloop
return L
</code>
</gretl-function>
<gretl-function name="add_info_criteria" type="void" private="1">
 <params count="1">
  <param name="self" type="bundleref"/>
 </params>
<code>/* Add information criteria
return: void */
strings names = defarray(&quot;aic&quot;, &quot;bic&quot;, &quot;hqc&quot;, &quot;aicc&quot;)
matrix cr = criteria(self.ess, self.T, rows(self.coeff))
loop foreach i names
  scalar self[&quot;$i&quot;] = cr[i]
endloop
</code>
</gretl-function>
<gretl-function name="fmols_est" type="bundle" private="1">
 <params count="3">
  <param name="ys" type="series" const="true"/>
  <param name="xlist_deter" type="list" const="true"/>
  <param name="self" type="bundle" const="true"/>
 </params>
<code>/* Actual FMOLS estimator. */
smpl (1 + self.t1) ;
bundle B
scalar n_yxlist = self.cols_mymx
scalar n_xlist = self.cols_mx
matrix g = mols(self.omega[2:n_yxlist, 1], self.omega[2:n_yxlist, 2:n_yxlist])
matrix delta_g = self.delta[2:n_yxlist, 1] - self.delta[2:n_yxlist, 2:n_yxlist] * g
scalar k = get_trend_powermax(self.type_deterministic)
delta_g |= zeros((k + 1), 1)    # this is &quot;M*&quot;
# Clean &quot;y&quot;
series mask = 1
smpl full
matrix ystar = ys - self.srun_innovations * g
smpl mask == 1 --restrict
B.t1 = $t1
B.t2 = $t2
B.T = $nobs
# Cointegrating vector based on clean &quot;y&quot;
matrix m_xlist_deter = {xlist_deter}
matrix xxi = invpd(m_xlist_deter'm_xlist_deter)
matrix B.coeff = xxi * (m_xlist_deter'ystar - delta_g)
#  Covariance matrix
matrix sg = (self.omega[1,1] - self.omega[1,2:n_yxlist] * g) / $nobs
matrix B.vcv = xxi * sg
matrix B.stderr = sqrt(diag(B.vcv))
series yhat = {xlist_deter} * B.coeff
series B.yhat = yhat
series B.uhat = ys - B.yhat
scalar B.ess = sst(B.uhat)
scalar B.sigma = sd(B.uhat)
return B
</code>
</gretl-function>
<gretl-function name="recolor_delta" type="matrix" private="1">
 <params count="4">
  <param name="delta" type="matrix" const="true"/>
  <param name="coeff_white" type="matrix" const="true">
<description>pre-whitened coeffs.</description>
  </param>
  <param name="ai" type="matrix" const="true"/>
  <param name="vcv_innovations" type="matrix" const="true"/>
 </params>
<code>/*  */
return ai'delta * ai - ai'(coeff_white'vcv_innovations)
</code>
</gretl-function>
<gretl-function name="recolor_omega" type="matrix" private="1">
 <params count="3">
  <param name="omega" type="matrix" const="true"/>
  <param name="coeff_white" type="matrix" const="true">
<description>pre-whitened coeffs.</description>
  </param>
  <param name="ai" type="matrixref"/>
 </params>
<code>/*  */
ai = inv( I(cols(omega)) - coeff_white)
return qform(ai', omega)
</code>
</gretl-function>
<gretl-function name="longrun_cov" type="matrix" private="1">
 <params count="2">
  <param name="kernel_est" type="matrix" const="true">
<description>weights</description>
  </param>
  <param name="u" type="matrix" const="true">
<description>innovations</description>
  </param>
 </params>
<code>/* Compute the long-run covariance matrix. */
scalar T = rows(u)
matrix lambda = mshape(0, cols(u), cols(u))
loop j=1..rows(kernel_est)
  matrix m = u[1:(T-j),]'u[(1+j):T,]
  lambda += m * kernel_est[j]
endloop
return lambda
</code>
</gretl-function>
<sample-script>
clear
set verbose off

include FMOLS.gfn

open denmark.gdt --quiet


# Build some regressor(s)
series spread = IDE - IBO
list xlist = LRY spread

# Level-based estimation by OLS first
ols LRM const xlist
series ec_ols = $uhat

# Run FMOLS with default options
bundle model = FMOLS(LRM, xlist)
print model

# Store and plot error-correction term
series ec_fmols = model.uhat
list EC = ec_ols ec_fmols
gnuplot EC --with-lines --time-series --output=display \
  { set title 'Error-correction term'; }


# Customize some options for FMOLS
bundle opts = _(\
                type_deterministic = &quot;ct&quot;,\
                type_dgp_x = &quot;c&quot;,\
                do_prewhite = FALSE,\
                type_kernel = &quot;parzen&quot;)

bundle model = FMOLS(LRM, xlist, opts)
print model
</sample-script>
</gretl-function-package>
</gretl-functions>
