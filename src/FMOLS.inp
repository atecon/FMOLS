function matrix timepoly (const int T[1::],
                          const int maxpower[-1::])
    /* Compute constant and (non-)linear trend.
    Parameters:
        T: number of observations
        maxpower:-1 = no constant
                  0 = constant
                  1 = linear trend
                  2 = quadratic trend


    return: A matrix holding the requested deterministics.
            maxpower ==-1: empty matrix
            maxpower == 0: T by 1 matrix with ones
            maxpower == 1: T by 2 matrix with ones and linear trend
            maxpower == 2: T by 3 matrix with ones linear and quadratic  trend
    */

    if maxpower == -1
        matrix ret = {}
        colnames(ret, "none")
        return ret
    endif

    strings clabels = defarray("intercept")
    matrix ret = ones(T, 1)

    if maxpower > 0
        scalar hT = floor(T / 2)
        scalar even = T % 2
        matrix trend = seq((1 - even - hT), hT)'
        ret ~= trend.^seq(1, maxpower)

    	if maxpower > 0
    	    clabels += "trend"
    	endif
    	if maxpower > 1
    	    clabels += "qtrend"
    	endif
    endif
    cnameset(ret, clabels)

    return ret
end function


function string msg_type_dgp_x (const string type)
    /* Map selected type to unique ID. */

    if type == "nc"
        ret = " No constant"
    elif type == "c"
        ret = " Constant"
    elif type == "ct"
        ret = " Constant and linear trend"
    elif type == "ctt"
        ret = " Constant, linear and quadratic trend"
    endif

    return ret
end function


function string msg_prewhiten (const bool do_prewhite)
    /* For printing only. */

    if do_prewhite
        return " Pre-Whitened"
    else
        return " Not Pre-Whitened"
    endif
end function


function matrix get_stats (const bundle self)
    /* Compile vector of model statistics
    return: matrix, column vector of statistics. */

    matrix stats = self.ess | self.sigma | self.aic | self.aicc | \
                    self.bic | self.hqc | self.df

    strings label = defarray("Sum squared resid",\
                              "S.E. of regression",\
                              "Akaike criterion",\
                              "Akaike corrected",\
                              "Schwarz criterion",\
                              "Hannan-Quinn",\
                              "Degrees of freedom"\
                              )

    rnameset(stats, label)

    return stats
end function


function string capitalize (string s)
    /* Convert the first character of the string 's' to a capital (uppercase).
    return: string, First character of 's' in the capital.*/

    return toupper(s[1]) ~ substr(s, 2, nelem(s))
end function


function void print_results (const bundle model)
    /* Print estimation results. */

    matrix coeff_se = model.coeff ~ model.stderr
    strings label = model.parnames
    matrix stats = get_stats(model)
    label += rnameget(stats)

    string msg_type_dgp_x = msg_type_dgp_x(model.type_dgp_x)
    string msg_whiten = msg_prewhiten(model.do_prewhite)
    string msg_kernel = sprintf(" %s", capitalize(model.type_kernel))

    if model.bandwidth == -1
        msg_band = sprintf("(automatic) estimate: %5.3g\n", model.bandwidth_value)
    else
        msg_band = sprintf("preset at: %2.3g\n", model.bandwidth_value)
    endif

    print  "======================================================================"
    print "Cointegrating regression"
    printf "FMOLS, using observations %s-%s (T = %d)\n\n", obslabel(model.t1),\
        obslabel(model.t2), model.T
    printf "Dependent variable: %s\n", model.depvar
    printf "Assumed regressor deterministics:"
    print msg_type_dgp_x

    printf "Method of estimation of covariance parameters:"
    print msg_whiten

    printf "Kernel:"
    print msg_kernel

    printf "Bandwidth "
    print msg_band

    print  "_____________________________________________________________________"

    modprint coeff_se label stats

    print  "======================================================================"
end function


function scalar get_kernel_id (const string type_kernel)
    /* Map kernel type to unique ID. */

    bundle map = _(\
                    quadratic = 1,\
                    parzen = 2,\
                    bartlett = 3\
                )

    catch scalar id = map[type_kernel]
    errorif($error, sprintf("Kernel type '%s' not known. Abort.", type_kernel))

    return id
end function


function scalar bwidth (const string type_kernel,
                        int T[1::],
                        const matrix ae,
                        const matrix se,
                        const scalar ad)
    /* Compute bandwidth. */

    if get_kernel_id(type_kernel) == 1       # Quadratic Spectral
        scalar coeff_white = 4 * ( sumc((ae.*se./((1-ae).^4)).^2) ) / ad
        eband = 1.3221 * ( (coeff_white * T)^.2 )
    elif get_kernel_id(type_kernel) == 2     # Parzen
        scalar coeff_white = 4 * ( sumc((ae.*se./((1-ae).^4)).^2) ) / ad
        eband = 2.6614 * ( (coeff_white * T)^.2 )
    elif get_kernel_id(type_kernel) == 3     # Bartlett
        scalar coeff_white = 4 * ( sumc((ae.*se./(((1-ae).^3).*(1+ae))).^2) )' / ad
        eband = 1.1447 * ( (coeff_white * T)^(1/3) )
    endif

    return eband
end function


function scalar compute_bandwidth (const matrix mat,
                                   const string type_kernel)
    /* Compute optimal bandwidth.
    return: scalar, value of optimal bandwidth. */

    scalar T = rows(mat)

    matrix eb = mat[1:(T-1),]
    matrix ef = mat[2:T,]
    matrix ae = ( sumc(eb .* ef)./sumc(eb.^2) )'
    matrix ee = ef - eb .* ae'
    matrix se = sqrt( meanc(ee.^2) )'
    scalar ad = sumc( (se ./ ((1 - ae).^2)).^2 )'

    return bwidth(type_kernel, T, ae, se, ad)
end function



function matrix compute_kernel (int T[1::],
                                const string type_kernel,
                                scalar bandwidth)
    /* Compute kernel-based weights.
    return: matrix, vector of weights. */

    matrix jb = seq(1, (T-1)) ./ bandwidth

    if get_kernel_id(type_kernel) == 1   # Quadratic Spectral
        jband = jb * 1.2 * $pi
        matrix kernel_est = 3 * ((sin(jband)./jband - cos(jband))./(jband.^2))
    elif get_kernel_id(type_kernel) == 2     #  Parzen
        matrix kernel_est = (1 - (jb.^2)*6 + (jb.^3)*6).*(jb .<= 0.5)
        kernel_est = kernel_est + 2 * ((1-jb).^3) .* ((jb .<=1) && (jb .> 0.5))
    elif get_kernel_id(type_kernel) == 3     #  Bartlett
        matrix kernel_est = (1-jb).*(jb .<= 1)
    else
        funcerr sprintf("Kernel type '%s' is not known. Abort.", type_kernel)
    endif

    return vec(kernel_est)
end function


function bundle check_sample (const list L, const bundle self)
    /*  Check for missing values and return sample start and end observations.*/

    scalar Told = $nobs
    catch smpl L --contiguous

    errorif($error, "ERROR: Your dataset has missing values in between for some of your variables. Abort.")

    scalar Tnew = $nobs

    scalar Tdiff = Told - Tnew
    if Tdiff && self.verbose
        printf "\nWARNING: Dropped %d observations due to missing values.",Tdiff
    endif

    if self.verbose
        printf "\nINFO: Sample range: %s to %s.\n", obslabel($t1), obslabel($t2)
    endif

    return _(t1 = $t1, t2 = $t2)
end function


function void add_column_dimensions (const list xlist, bundle *self)
    /*  Determine column dimensions of matrices. */

    scalar self.cols_mx = nelem(xlist)
    scalar self.cols_mymx = 1 + self.cols_mx
end function


function matrix get_shortrun_innovations (const list xlist "in levels",
                                          const list deter "Deterministics")
    /* Compute short-term innovations: clean differences from deterministics. */

    list Dxlist = diff(xlist)
    smpl Dxlist deter --no-missing
    matrix u = mshape(NA, $nobs, 1)

    mols({Dxlist}, {deter}, &u)

    return u
end function


function series get_longrun_innovations (const series y "Endogenous in levels",
                                         const list xlist "levels + deterministics")
    /* Compute long-run coefficient vector and return residuals which \
	are equivalent to deviations from long-run relationship.
    return: series, residuals */

    smpl y xlist --no-missing

    catch ols y xlist --quiet
    errorif($error, "Level estimation failed. Abort.")

    return $uhat
end function


function matrix est_var_model (const matrix m,
                               matrix *uhat)
    /* Estimate a VAR model by mols(). Return coefficient matrix. */

    scalar init = 2      # get rid of initial NAs
    scalar T = rows(m)
    matrix m_lags = mlag(m, 1, NA)[init:,]

    matrix bhat = mols( m[init:,], m_lags, &uhat )
    errorif($error, "Pre-whitening failed. Abort.")

    return bhat
end function


function bundle fmols_defaults (void)
    /*  Set and return default values. */

    bundle B

    string B.type_deterministic = "c"
    string B.type_dgp_x = "c"
    string B.type_kernel = "quadratic"
    scalar B.do_prewhite = TRUE
    scalar B.bandwidth = -1
    scalar B.verbose = TRUE

    return B
end function


function scalar get_trend_powermax (const string type)
    /* Map deterministics to maximum degree (power) of trend variable. */

    scalar ret = NA

    if type == "nc"
	   ret = -1
    elif type == "c"
       ret = 0
    elif type == "ct"
	   ret = 1
    elif type == "ctt"
	   ret = 2
    endif

    return ret
end function


function void type_strings_tolower (bundle *self)
    /* Format specific string values.
    return: void */

    strings keys = defarray("type_deterministic",\
                            "type_dgp_x",\
                            "type_kernel"\
                            )
    loop foreach i keys
        self["$i"] = tolower(self["$i"])
    endloop
end function


function list matrix_to_list (const matrix m,
                              string suffix[null])
    /* Cast column vectors to series and add to list.
    return: list, column vectors as list */

    # TODO: This function will be superseded by a native one soon.
    list L
    string suffix = exists(suffix) ? suffix : ""

    loop i=1..cols(m)
	   string sername = fixname(cnameget(m)[i])
       list L += genseries(sprintf("%s%s", sername, suffix), m[,i])
    endloop

    return L
end function


function bundle FMOLS (const series ys,
                       const list xlist,
                       const bundle opts[null])
    /* Public function calling all necessary steps. */

    bundle self = fmols_defaults()

    if exists(opts)
        self = opts + self
    endif

    errorif(get_trend_powermax(self.type_deterministic) < 0,\
            "The assumed deterministic for the endogenous must include at least a constant. Please adapt parameter 'type_deterministic'.")

    type_strings_tolower(&self)

    string self.name_endogenous = argname(ys)
    string self.names_xlist = varname(xlist)

    self = self + check_sample(deflist(ys, xlist), self)
    smpl self.t1 self.t2
    scalar self.T = $nobs
    add_column_dimensions(xlist, &self)

    matrix mtmp = timepoly($nobs, get_trend_powermax(self.type_deterministic))
    list det_levels = matrix_to_list(mtmp)

    # one observation lost due to differencing of level series
    smpl (self.t1 + 1) ;
    list det_dynamics
    matrix mtmp = timepoly($nobs, get_trend_powermax(self.type_dgp_x))
    list det_dynamics = matrix_to_list(mtmp, "_dyn")
    # TODO: At some point matrix_to_list() can be replaced by gretl's internal mat2list() function introduced in 2022a

    # OLS regression of levels + deterministics
    list xlist_deter = xlist det_levels
    smpl (self.t1 + 1) ;
    series lrun_innovations = get_longrun_innovations(ys, xlist_deter)
    # TODO: get_longrun_innovations() may be replaced by gretl's internal lrvar()

    # Construct errors of dynamics: Has (T-1) observations due to differencing
    # Note: ols command not applicable as xlist can have multiple columns
    smpl full
    if nelem(det_dynamics)  # if type_dgp_x != "nc"
        matrix self.srun_innovations = get_shortrun_innovations(xlist,\
                                                                det_dynamics)
    else
        matrix self.srun_innovations = {diff(xlist)}
    endif

    smpl (self.t1 + 1) ;
    matrix xdx = {xlist_deter}'self.srun_innovations

    # Concatenate errors
    matrix innovations = {lrun_innovations} ~ self.srun_innovations
    matrix vcv_innovations = innovations'innovations

    if self.do_prewhite             # Pre-white residuals using VAR(p)
        matrix innovations_white
        matrix coeff_white = est_var_model(innovations, &innovations_white)
    else
        matrix innovations_white = innovations
    endif
    scalar self.Teffective = rows(innovations_white)

    if self.bandwidth == -1
        scalar self.bandwidth_value = compute_bandwidth(innovations_white,\
                                                         self.type_kernel)
    endif

    # Estimate covariances
    matrix kernel_est = compute_kernel(self.Teffective, self.type_kernel,\
                                       self.bandwidth_value)
    matrix sigma = innovations_white'innovations_white

    # long-run covariance matrix
    matrix lambda = longrun_cov(kernel_est, innovations_white)

    matrix self.delta = sigma + lambda
    matrix self.omega = self.delta + lambda'

    if self.do_prewhite
        matrix ai
        matrix self.omega = recolor_omega(self.omega, coeff_white, &ai)
        matrix self.delta = recolor_delta(self.delta, coeff_white, ai,\
                                          vcv_innovations)
    endif

    # Fill the model bundle
    bundle model = fmols_est(ys, xlist_deter, self)
    strings model.parnames = varnames(xlist_deter)
    rnameset(model.coeff, model.parnames)
    model.df = model.T - rows(model.coeff)
    model.depvar = argname(ys)
    add_info_criteria(&model)
    model.type_kernel = self.type_kernel
    model.type_dgp_x = self.type_dgp_x
    model.type_deterministic = self.type_deterministic
    model.do_prewhite = self.do_prewhite
    model.bandwidth_value = self.bandwidth_value
    model.bandwidth = self.bandwidth

    if self.verbose
        print_results(model)
    endif

    return model
end function


function bundle FMOLS_GUI(const series y "dependent variable",
			  const list X "explanatory variables",
			  int dety[0:2:0] "deterministics for dep. var." {"Constant", "Trend", \
									  "Quadratic"},
			  int detx[0:2:0] "deterministics for indep. var." {"Constant", "Trend", \
									    "Quadratic"},
			  int kernel[1:3:1] "kernel type" {"Quadratic", "Parzen", "Bartlett"},
			  int bwidth[-1::-1] "Bandwidth (-1 = automatic)",
			  bool prewhite[1] "Perform VAR(1) prewhitening?",
			  bool verbose[1] "Show results")

    bundle opts = defbundle("do_prewhite", prewhite, "bandwidth", bwidth , "verbose", verbose)
    opts.type_deterministic = substr("ctt", 1, dety + 1)
    opts.type_dgp_x = substr("ctt", 1, detx + 1)
    opts.bandwidth = bwidth
    
    if kernel == 1
	opts.type_kernel = "quadratic"
    elif kernel == 2
	opts.type_kernel = "parzen"
    elif kernel == 3
	opts.type_kernel = "bartlett"
    endif

    ret = FMOLS(y, X, opts)

    return ret
end function
    

function void add_info_criteria (bundle *self)
    /* Add information criteria
    return: void */

    strings names = defarray("aic", "bic", "hqc", "aicc")
    matrix cr = criteria(self.ess, self.T, rows(self.coeff))

    loop foreach i names
        scalar self["$i"] = cr[i]
    endloop
end function

function bundle fmols_est (const series ys,
                           const list xlist_deter,
                           const bundle self)
    /* Actual FMOLS estimator. */

    smpl (1 + self.t1) ;

    bundle B
    scalar n_yxlist = self.cols_mymx
    scalar n_xlist = self.cols_mx

    matrix g = mols(self.omega[2:n_yxlist, 1],\
                    self.omega[2:n_yxlist, 2:n_yxlist])

    matrix delta_g = self.delta[2:n_yxlist, 1] - self.delta[2:n_yxlist, 2:n_yxlist] * g
    scalar k = get_trend_powermax(self.type_deterministic)
    delta_g |= zeros((k + 1), 1)    # this is "M*"

    # Clean "y"
    series mask = 1
    smpl full
    matrix ystar = ys - self.srun_innovations * g
    smpl mask == 1 --restrict
    B.t1 = $t1
    B.t2 = $t2
    B.T = $nobs

    # Cointegrating vector based on clean "y"
    matrix m_xlist_deter = {xlist_deter}
    matrix xxi = invpd(m_xlist_deter'm_xlist_deter)

    matrix B.coeff = xxi * (m_xlist_deter'ystar - delta_g)

    #  Covariance matrix
    matrix sg = (self.omega[1,1] - self.omega[1,2:n_yxlist] * g) / $nobs
    matrix B.vcv = xxi * sg
    matrix B.stderr = sqrt(diag(B.vcv))

    series yhat = {xlist_deter} * B.coeff
    series B.yhat = yhat
    series B.uhat = ys - B.yhat
    scalar B.ess = sst(B.uhat)
    scalar B.sigma = sd(B.uhat)

    return B
end function


function matrix recolor_delta (const matrix delta,
                               const matrix coeff_white "pre-whitened coeffs.",
                               const matrix ai,
                               const matrix vcv_innovations)
    /*  */
    return ai'delta * ai - ai'(coeff_white'vcv_innovations)
end function


function matrix recolor_omega (const matrix omega,
                               const matrix coeff_white "pre-whitened coeffs.",
                               matrix *ai)
    /*  */

    ai = inv( I(cols(omega)) - coeff_white)
    return qform(ai', omega)
end function


function matrix longrun_cov (const matrix kernel_est "weights",
                             const matrix u "innovations")
    /* Compute the long-run covariance matrix. */

    scalar T = rows(u)
    matrix lambda = mshape(0, cols(u), cols(u))

    loop j=1..rows(kernel_est)
        matrix m = u[1:(T-j),]'u[(1+j):T,]
        lambda += m * kernel_est[j]
    endloop

    return lambda
end function
