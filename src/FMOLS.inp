# hansl code from package FMOLS 1.0 (2017-03-22)

# private functions

function matrix timepoly (scalar T,
                          scalar maxpower)
    hT = floor(T/2)
    even = T % 2
    ret = ones(T,1)
    if maxpower > 0
        trend = seq(1-even-hT, hT)'
        # trend = seq(1, T)'
        ret ~= trend .^ seq(1,maxpower)
    endif
    return ret
end function

function void print_results (scalar t,
                             string regnames,
                             matrix b1m,
                             matrix b2m,
                             int k1,
                             int k2,
                             int whiten,
                             int kernel,
                             int band,
                             scalar eband)
    string detnames = k1 ? "constant,trend" : "constant"
    print  "======================================================================"
    printf "Fully Modified Least Squares Regression (sample size = %d)\n", t
    print  "_____________________________________________________________________"
    print  ""
    print  "  I(1) variables"
    modprint b1m regnames
    print ""
    print "Deterministic terms"
    modprint b2m detnames
    print ""
    printf "Assumed regressor deterministics:"
    if k2 == 0
        printf " Constant\n"
    elif k2 == 1
        printf " Constant and trend\n"
    elif k2 == 2
        printf " Constant, linear and quadratic trend\n"
    endif
    printf "Method of Estimation of Covariance Parameters:"
    if whiten
        printf " Pre-Whitened\n"
    else
        printf " Not Pre-Whitened\n"
    endif
    printf "Kernel:"
    if kernel == 1
        printf " Quadratic Spectral\n"
    elif kernel == 2
        printf " Parzen\n"
    elif kernel == 3
        printf " Bartlett\n"
    endif
    printf "Bandwidth:"
    if band == 0
        printf " Automatic, estimate = %5.3g\n", eband
    elif band < 0
        printf " Preset at 0\n"
    else
        printf " Preset at = %5.3g\n", eband
    endif
    print  "======================================================================"
    printf "\n\n"
end function

function scalar bwidth (int kernel,
                        int T,
                        const matrix ae,
                        const matrix se,
                        const scalar ad)
    if kernel == 1 # Quadratic Spectral
        scalar a = 4*(sumc((ae.*se./((1-ae).^4)).^2))/ad
        eband = 1.3221*((a*T)^.2)
    elif kernel == 2 # Parzen
        scalar a = 4*(sumc((ae.*se./((1-ae).^4)).^2))/ad
        eband = 2.6614*((a*T)^.2)
    elif kernel == 3 # Bartlett
        scalar a = 4*(sumc((ae.*se./(((1-ae).^3).*(1+ae))).^2))'/ad
        eband = 1.1447*((a*T)^(1/3))
    else
        eband = NA
    endif
    return eband
end function

function matrix K (int T,
                   int kernel,
                   scalar eband)
    matrix kern = {}
    matrix jb = seq(1,T-1) ./ eband
    if kernel == 1
        # Quadratic Spectral Kernel #
        jband = jb * 1.2 * $pi
        kern = 3 * ((sin(jband)./jband - cos(jband))./(jband.^2))
    elif kernel == 2
        #  Parzen kernel #
        kern = (1 - (jb.^2)*6 + (jb.^3)*6).*(jb .<= 0.5)
        kern = kern + 2 * ((1-jb).^3) .* ((jb .<=1) && (jb .> 0.5))
    elif kernel == 3
        #  Bartlett kernel #
        kern = (1-jb).*(jb .<= 1)
    endif
    return kern
end function

# public functions

function bundle FMOLS (series ys,
                       list xlist,
                       int k1[0:1:0] "Model deterministics" {"Constant", "Constant and Trend"},
                       int k2[0:2:1] "DGP of X" {"No drift in X", "Drift in X", "Quadratic trend in X"},
                       bool whiten[1] "VAR Prewithening for covariance estimation",
                       int kernel[1:3:1] "Kernel for covariance estimation" {"Quadratic", "Parzen", "Bartlett"},
                       scalar band[0] "Bandwidth for covariance estimation, default: automatic")
    bundle results = null
    # adjust sample
    smpl ys xlist --contiguous
    # create matrices from input series
    matrix y = {ys}
    matrix x = {xlist}
    scalar T = rows(y)
    scalar p1 = cols(y)
    scalar p2 = cols(x)
    scalar p = p1 + p2
    # Construct Trends #
    matrix t2  = timepoly(T-1, xmax(0,k2-1)) # deterministic order in regressors
    matrix t11 = timepoly(T, k1)           # deterministics in regression
    matrix xt = x~t11
    matrix y2 = y[2:,]
    matrix x2 = xt[2:,]
    # OLS #
    matrix xxi = invpd(x2'x2)
    matrix xy = x2'y2
    matrix b = xxi*xy
    # Construct u2 #
    dx = diff(x)[2:,]
    matrix u2
    # regressor innovation #
    mols(dx, t2, &u2)
    xdx = x2'u2
    #  OLS Residuals and regressor innovations  #
    u = (y2 - x2*b) ~ u2
    # PreWhiten Residuals Using VAR(1)  #
    if whiten
        matrix e
        matrix a = mols(u[2:T-1,], u[1:T-2,], &e)
        Te = T - 2
    else
        matrix e = u
        Te = T - 1
    endif
    # Select Bandwidth #
    if band == 0
        matrix eb = e[1:Te-1,]
        matrix ef = e[2:Te,]
        matrix ae = (sumc(eb.*ef)./sumc(eb.^2))'
        matrix ee = ef - eb.*ae'
        matrix se = sqrt(meanc(ee.^2))'
        scalar ad = sumc((se./((1-ae).^2)).^2)'
        scalar eband = bwidth(kernel, Te, ae, se, ad)
    else
        scalar eband = band
    endif
    # Estimate Covariances #
    matrix kern = K(Te, kernel, eband)
    sig = e'e
    matrix lam = zeros(p,p)
    loop j=1..(Te-1)   --quiet
        lam = lam + (e[1:Te-j,]'e[1+j:Te,])*kern[j]
    endloop
    delta = sig + lam
    omega = delta + lam'
    uu = u'u
    # Recolor #
    if whiten
        matrix ai = inv(I(p) - a)
        omega = qform(ai', omega)
        delta = ai'delta*ai - ai'(a'uu)
    endif
    # Fully Modified Estimation #
    g = mols(omega[2:p,1], omega[2:p,2:p])
    delg = delta[2:p,1] - delta[2:p,2:p]*g
    delg = delg|zeros(k1+1,p1)
    ystar = y2 - u2*g
    b = xxi*(x2'ystar - delg)
    b1 = b[1:p2]
    b2 = b[p2+1:]
    #  Covariance Matrix #
    sg = (omega[1,1] - omega[1,2:p]*g)/(T-1)
    v = xxi*sg
    u = ystar - x2*b
    se = sqrt(diag(v))
    u = y - xt*b
    # I(1) coefficients
    matrix b1m=b1~se[1:p2]
    string rnames = varname(xlist)
    # deterministics
    matrix b2m=b2~se[p2+1:]
    print_results(T, rnames, b1m, b2m, k1, k2, whiten, kernel, band, eband)
    results["b1"] = b1
    results["b2"] = b2
    results["v"] = v
    results["u"] = u
    return results
end function
